package controller;

import java.awt.BorderLayout;
import java.awt.Container;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import BDD.BDDInterface;
import GUIExceptions.SettingsFromBDDException;
import windows.*;

//Classe permettant de controller ce qui se passe quand on appuie sur un bouton, c'est elle qui
//interrogera la base de donnée
public class Controller
{
	private BDDInterface bdd;
	private Window window;
	private String duree;// Ce tableau permet de connaitre la durée à afficher
	private String temps = "mois";

	public Controller(Window window, BDDInterface bdd) 
	{
		this.window = window ;
		this.bdd = bdd ;
		this.loadPassword() ;
		
	}
	
	/****************************************************************************************************/
	// gestion du mot de passe pour la session gestionnaire
	// attribut + setter
	String vraimdp ;
	
	public void setCryptedMDP(String crypted)
	{
		this.vraimdp = crypted ;
	}
	
	public void loadPassword()
	{
		FileReader fs = null ;
        BufferedReader bs = null ;
        String filename = "datas" + File.separator + "Password" ;
		
		try 
		{
			fs = new FileReader(filename) ;
		} 
		catch (FileNotFoundException e1) 
		{
			e1.printStackTrace();
		}
		
		bs = new BufferedReader(fs) ;
		
		try 
		{
            String crypted = bs.readLine();   
            System.out.println("to setCryptedMDP") ;
            this.setCryptedMDP(crypted) ;
            System.out.println("PassWord loaded") ;
		}
		catch (Exception e) 
		{
            System.err.println(e) ;
            e.printStackTrace(System.err);
		}
	}
	
	public void printCryptedMDP(String crypted)
	{
		String filename = "datas" + File.separator + "Password" ;
		
		try
        {
			PrintWriter ps = new PrintWriter(filename) ; 
        	ps.print(crypted) ;
        	ps.close() ;
        }
        catch(Exception e)
        {
        	System.err.println(e) ;
            e.printStackTrace(System.err) ;
        }
		
		this.setCryptedMDP(crypted) ;
		
	}
	
	// teste juste l'égalité du mot de passse et de la chaine entrée
	private Boolean verifMotDePasse(char[] cs)
	{
		String word = String.valueOf(cs) ;
		String crypted = Integer.toString(word.hashCode()) ;
		return (crypted.equals(vraimdp));		
	}
	
	// changer de mot de passe
	

	public void ecranChangeMotDePasse()
	{
		ViewChangePassword cp = new ViewChangePassword(this);
		window.setContentPane(cp);
		window.validate();
	}
  
	/****************************************************************************************************/
	
	private Stack<JPanel> stackpreviousview = new Stack<JPanel>() ; 
	private Stack<JPanel> stacknextview = new Stack<JPanel>() ;
	private JPanel actualview ;
	
	public void setActualView(JPanel actualview)
	{
		this.actualview = actualview ;
	}
	
	public JPanel getActualView()
	{
		return actualview ;
	}
	
	public void addPreviousView(JPanel previousview)
	{
		stackpreviousview.push(previousview) ;
	}
	
	public void previousView(JPanel actualview)
	{
		if(stackpreviousview.empty())
		{
			JOptionPane.showMessageDialog(null, "L'opération demandée est impossible", "Attention", JOptionPane.WARNING_MESSAGE);
		}
		else
		{
			JPanel previousview = stackpreviousview.pop() ;
			stacknextview.push(actualview) ;
			window.setContentPane(previousview);
			window.validate();
		}
	}
	
	public void nextView(JPanel actualview)
	{
		if(stacknextview.empty())
		{
			JOptionPane.showMessageDialog(null, "L'opération demandée est impossible", "Attention", JOptionPane.WARNING_MESSAGE);
		}
		else
		{
			JPanel nextview = stacknextview.pop() ;
			stackpreviousview.push(actualview) ;
			window.setContentPane(nextview);
			window.validate();
		}
	}

	
	/****************************************************************************************************/

	


/** ViewWelcome */
public void boutonBarman()
{
	//Méthode appelée quand on appuie sur Barman sur l'écran d'accueil
	ViewBarmanHome vbh = new ViewBarmanHome(this);
	this.setActualView(vbh) ;
	window.setContentPane(vbh);
	window.validate();
}

public void boutonGestionnaire()
{
	//Méthode appelée quand on appuie sur Barman sur l'écran d'accueil
	ViewBossLogin vbh = new ViewBossLogin(this);
	window.setContentPane(vbh);
	this.setActualView(vbh) ;
	window.validate(); 
}

/** ViewBarmanHome */
public void imprimerNote()
{
	//Méthode appelée si on appuie sur imprimer note dans l'écran du Barman
	//Code pour le test, il faudra demander a la base de donnée de nous fournir la note pour le serveur donné
	JPanel pan = new JPanel();
	pan.add(new JLabel("test imprimerNote() réussi"));
	window.setContentPane(pan);
	this.setActualView(pan) ;
	window.validate();
}

/** ViewBossHome */
public void consulterVosDonnees() 
{
	ViewSeeDatas vsd = new ViewSeeDatas(this);
	 window.setContentPane(vsd);
	 this.setActualView(vsd) ;
	 window.validate();
}

public void gestionStocks() 
{
	ViewStocksManagement vsm = new ViewStocksManagement(this);
	 window.setContentPane(vsm);
	 this.setActualView(vsm) ;
	 window.validate();
}

public void retirerGoulot()
{
	//Demander quel goulot il faut prendre pour l'instant il ferme la fenêtre pour le test
	JPanel pan = new JPanel();
	pan.add(new JLabel("test retirerGoulot() réussi"));
	window.setContentPane(pan);
	this.setActualView(pan) ;
	window.validate();
	
}

/** View Login*/
public void login() 
{
	ViewBossLogin vbl = new ViewBossLogin(this);
	 window.setContentPane(vbl);
	 this.setActualView(vbl) ;
	 window.validate();
}


		

public void motDePasse(char[] cs)
{
	if(this.verifMotDePasse(cs))
	{
		ViewBossHome vbh = new ViewBossHome(this);
		window.setContentPane(vbh);
		this.setActualView(vbh) ;
		window.validate();
	}
	else
	{
		JOptionPane.showMessageDialog(null, "Mot de passe invalide.", "Erreur", JOptionPane.ERROR_MESSAGE);
	}
}
	

	// changer de mot de passe
	public void changeMotDePasse(char[] cs0, char[] cs1, char[] cs2) {
		if (this.verifMotDePasse(cs0)) {
			if (Arrays.equals(cs1, cs2)) {
				JPanel panneau = new JPanel();
				this.setMDP(cs1);
				JOptionPane.showMessageDialog(null,
						"Mot de passe changé avec succès !", "Information",
						JOptionPane.INFORMATION_MESSAGE);
				panneau.add(new JLabel("Mot de Passe changé"));
				window.setContentPane(panneau);
				window.validate();
			} else {
				JOptionPane
						.showMessageDialog(
								null,
								"Les deux derniers champs saisis ne correspondent pas.",
								"Erreur", JOptionPane.ERROR_MESSAGE);
			}
		} else {
			JOptionPane.showMessageDialog(null, "Mot de Passe Invalide.",
					"Erreur", JOptionPane.ERROR_MESSAGE);
		}
	}



	public void obtenirstock() {
		ViewStocksManagement vsm = new ViewStocksManagement(this);
		Container cp = window.getContentPane();
		cp.removeAll();
		window.validate();
		ViewStockManagementSouth pan2 = new ViewStockManagementSouth(this);

		window.add(vsm, BorderLayout.EAST);
		window.add(pan2, BorderLayout.SOUTH);
		window.validate();
	}

	public void commande() {
		ViewCommandManagement vsm = new ViewCommandManagement(this);
		Container cp = window.getContentPane();
		cp.removeAll();
		window.validate();
		ViewStockManagementSouth pan2 = new ViewStockManagementSouth(this);

		window.add(vsm, BorderLayout.EAST);
		window.add(pan2, BorderLayout.SOUTH);
		window.validate();
	}

	public void budget() {

	}

	public ArrayList<String> obtenirAlcools() {
		return bdd.listeDesBoissons();
	}

	public void visualiser(ViewStocksManagement vsm) {
		ArrayList<String> tableauAffichage = vsm.obtenirBouttonAlcool();
		System.out.println(tableauAffichage);
		System.out.println(duree);
	}

	public void visualiserCommandes(ViewCommandManagement vcm) {
		ArrayList<String> tableauAffichage = vcm.obtenirBouttonAlcool();
		System.out.println("Commande");
		System.out.println(tableauAffichage);
		System.out.println(duree);
	}

	public void setDuree(String duree) {
		this.duree = duree;
	}



}
